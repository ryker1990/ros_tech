/*! rosin-device-backend 2018-11-26 */

"use strict";var n=function(){function s(e,n){for(var t=0;t<n.length;t++){var s=n[t];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(e,n,t){return n&&s(e.prototype,n),t&&s(e,t),e}}(),c=require("mongodb"),e=require("aws-sdk"),t=o(e),s=require("./Config"),i=o(s);function o(e){return e&&e.__esModule?e:{default:e}}function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var l="mongodb://localhost:27017/rosin",u=10,a=function(){function e(){r(this,e),this.connect=this.connect.bind(this),this.start=this.start.bind(this),this.savePreset=this.savePreset.bind(this),this.loadPresets=this.loadPresets.bind(this),this.deletePreset=this.deletePreset.bind(this),this.saveCurrentSession=this.saveCurrentSession.bind(this),this.loadCurrentSession=this.loadCurrentSession.bind(this),this.selectPreset=this.selectPreset.bind(this),this.savePress=this.savePress.bind(this),this.saveYield=this.saveYield.bind(this),this.loadPresses=this.loadPresses.bind(this),this.sync=this.sync.bind(this),this.loadUnsyncedPresets=this.loadUnsyncedPresets.bind(this),this.loadUnsyncedPresses=this.loadUnsyncedPresses.bind(this),this.uploadPresets=this.uploadPresets.bind(this),this.markPresetsSynced=this.markPresetsSynced.bind(this),this.uploadPresses=this.uploadPresses.bind(this),this.markPressesSynced=this.markPressesSynced.bind(this),this.loadWifiSetup=this.loadWifiSetup.bind(this),this.setWifiSetup=this.setWifiSetup.bind(this),this.updateDeviceUiSettings=this.updateDeviceUiSettings.bind(this),this.loadDeviceUiSettings=this.loadDeviceUiSettings.bind(this),this.ddb=new t.default.DynamoDB(i.default.AWS)}return n(e,[{key:"start",value:function(e){this.machineID=e}},{key:"connect",value:function(){var i=this;return new Promise(function(t,s){c.MongoClient.connect(l,function(e,n){e?(console.log("Couldn't connect to MongoDB:"+e),--u<=0?(console.log("Connection failed. Giving up."),s(e)):(console.log("Retrying. #"+u),setTimeout(function(){i.connect().then(t).catch(s)},1e3))):t(n)})})}},{key:"updateDeviceUiSettings",value:function(s){var i=this;return this.connect().then(function(t){return new Promise(function(e,n){console.log("Updating device UI settings"+JSON.stringify(s)),i.loadDeviceUiSettings().then(function(e){return t.collection("deviceUiSettings").update({id:1},Object.assign({id:1},Object.assign(e,s)),{upsert:!0})}),e()})})}},{key:"loadDeviceUiSettings",value:function(){return this.connect().then(function(s){return new Promise(function(t,e){s.collection("deviceUiSettings").findOne({id:1},function(e,n){s.close(),null==e&&null!=n?(console.log("UiSettings found: "+JSON.stringify(n)),t(n)):(console.log("UI settings not found, returning {}"),t({}))})})})}},{key:"loadWifiSetup",value:function(){return this.connect().then(function(i){return new Promise(function(t,s){i.collection("wifiSetup").findOne({isSet:!0},function(e,n){i.close(),null==e?null==n?(console.log("No wifiSetup found."),t(!1)):(console.log("Found wifiSetup."),t(n.isSet)):(console.log("Error finding wifiSetup: "+e),s(e))})})})}},{key:"setWifiSetup",value:function(){return this.loadWifiSetup().then(this.connect).then(function(s){return new Promise(function(e,n){var t=s.collection("wifiSetup");console.log("Writing wifiSetup."),t.update({isSet:!0},{isSet:!0},{upsert:!0}),e()})})}},{key:"savePreset",value:function(e,n,o,r,c,l,u){return this.connect().then(function(i){return new Promise(function(t,s){console.log("Inserting preset"),i.collection("presets").insert({topTemp:e,bottomTemp:n,time:o,weight:r,material:c,bag:l,strainName:u,selected:!0},function(e,n){i.close(),null==e?(console.log("Saved preset:"),console.log(n.ops[0]),t(n.ops[0])):(console.log("Error saving preset: "+e),s(e))})})})}},{key:"loadPresets",value:function(){return this.connect().then(function(i){return new Promise(function(t,s){i.collection("presets").find().toArray(function(e,n){i.close(),null==e?(console.log("Loaded presets."),t(n)):(console.log("Error loading presets: "+e),s(e))})})})}},{key:"deletePreset",value:function(e){return this.connect().then(function(o){return new Promise(function(t,s){var i=o.collection("presets");i.deleteOne({_id:(0,c.ObjectId)(e)},function(e,n){o.close(),null==e?(console.log("Deleted preset."),t(i)):(console.log("Error deleting preset: "+e),s(e))})})})}},{key:"saveCurrentSession",value:function(i){return this.connect().then(function(s){return new Promise(function(e,n){var t=s.collection("session");console.log("Will update current session."),t.update({current:!0},{state:i,current:!0},{upsert:!0}),console.log("Current session updated."),e()})})}},{key:"loadCurrentSession",value:function(){return this.connect().then(function(e){return new Promise(function(t,s){e.collection("session").findOne({current:!0},function(e,n){null==e?(console.log("Found current session: "+n),null==n?(console.log("Using empty object as session."),t({})):(console.log("Using found session."),t(n))):(console.log("Error finding current session: "+e),s(e))})})})}},{key:"selectPreset",value:function(i){return this.connect().then(function(s){return new Promise(function(e,n){console.log("Will deselect all presets.");var t=s.collection("presets");t.update({},{$set:{selected:!1}},{multi:!0}),console.log("Will select presets with id "+i+"."),t.update({_id:(0,c.ObjectId)(i)},{$set:{selected:!0}},{multi:!0}),console.log("Current preset selected."),e()})})}},{key:"savePress",value:function(e,n,o,r){return this.connect().then(function(i){return new Promise(function(t,s){i.collection("presses").insert({topTemp:e,bottomTemp:n,time:o,date:(new Date).getTime(),bag:r.bag,bagSize:r.bagSize,material:r.material,strainName:r.strainName,weight:r.weight,notes:r.notes},function(e,n){i.close(),null==e?(console.log("Saved press:"),console.log(n.ops[0]),t(n.ops[0])):(console.log("Error saving press: "+e),s(e))})})})}},{key:"saveYield",value:function(i,o){return this.connect().then(function(s){return new Promise(function(e,n){var t=s.collection("presses");console.log("Will save yield."),t.update({_id:(0,c.ObjectId)(o)},{$set:{yield:i}},{multi:!0}),console.log("Yield saved."),e()})})}},{key:"loadPresses",value:function(){return this.connect().then(function(i){return new Promise(function(t,s){i.collection("presses").find().toArray(function(e,n){i.close(),null==e?(console.log("Loaded presses."),t(n)):(console.log("Error loading presses: "+e),s(e))})})})}},{key:"sync",value:function(){var n,t,e=this;this.loadUnsyncedPresets().then(function(e){n=e}).then(this.loadUnsyncedPresses).then(function(e){t=e}).then(function(){if(0<n.length)return e.uploadPresets(n)}).then(this.markPresetsSynced).then(function(){if(0<t.length)return e.uploadPresses(t)}).then(this.markPressesSynced).then(function(){setTimeout(e.sync,6e4)})}},{key:"loadUnsyncedPresets",value:function(){return this.connect().then(function(e){return new Promise(function(t,s){e.collection("presets").find({sync:{$exists:!1}}).toArray(function(e,n){null==e?(console.log("Sync: Loaded presets: "+n.length),t(n)):(console.log("Sync: Error loading presets: "+e),s(e))})})})}},{key:"loadUnsyncedPresses",value:function(){return this.connect().then(function(e){return new Promise(function(t,s){e.collection("presses").find({sync:{$exists:!1},yield:{$exists:!0}}).toArray(function(e,n){null==e?(console.log("Sync: Loaded presses: "+n.length),t(n)):(console.log("Sync: Error loading presses: "+e),s(e))})})})}},{key:"uploadPresets",value:function(i){var o=this;return new Promise(function(t,s){var e=i.map(function(e){return{PutRequest:{Item:{topTemp:{S:String(e.topTemp)},bottomTemp:{S:String(e.bottomTemp)},time:{S:String(e.time)},selected:{BOOL:e.selected},id:{S:String(e._id)},machineID:{S:String(o.machineID)},bagSize:{S:String(e.bag.size)},material:{S:String(e.material.name)},strainName:{S:String(e.strainName)},weight:{S:String(e.weight)}}}}}),n={RequestItems:{presets:e}};console.log("Presets sync requests:",e),o.ddb.batchWriteItem(n,function(e,n){e?(console.log("Error",e),s(e)):(console.log("Presets synced.",n),t(n))})})}},{key:"markPresetsSynced",value:function(e){var r=[];return e&&e.UnprocessedItems.presses&&(r=e.UnprocessedItems.presets.map(function(e){return e.PutRequest.Item.id})),this.connect().then(function(t){return new Promise(function(e,n){var o=t.collection("presets");o.find({sync:{$exists:!1}}).toArray(function(e,n){for(var t in n){var s=n[t],i=String(s._id);-1==r.indexOf(i)&&o.update({_id:(0,c.ObjectId)(i)},{$set:{sync:!0}},{multi:!0})}}),e()})})}},{key:"uploadPresses",value:function(i){var o=this;return new Promise(function(t,s){var e=i.map(function(e){return{PutRequest:{Item:{bagSize:{S:String(e.bagSize)},bottomTemp:{S:String(e.bottomTemp)},date:{S:String(e.date)},material:{S:String(e.material)},notes:{S:String(e.notes)},strainName:{S:String(e.strainName)},time:{S:String(e.time)},topTemp:{S:String(e.topTemp)},weight:{S:String(e.weight)},yield:{S:String(e.yield)},bag:{S:String(e.bag)},id:{S:String(e._id)},machineID:{S:String(o.machineID)}}}}}),n={RequestItems:{presses:e}};console.log("Presses sync requests:",e),o.ddb.batchWriteItem(n,function(e,n){e?(console.log("Error",e),s(e)):(console.log("Presses synced.",n),t(n))})})}},{key:"markPressesSynced",value:function(e){var r=[];return e&&e.UnprocessedItems.presses&&(r=e.UnprocessedItems.presses.map(function(e){return e.PutRequest.Item.id})),this.connect().then(function(t){return new Promise(function(e,n){var o=t.collection("presses");o.find({sync:{$exists:!1},yield:{$exists:!0}}).toArray(function(e,n){for(var t in n){var s=n[t],i=String(s._id);-1==r.indexOf(i)&&o.update({_id:(0,c.ObjectId)(i)},{$set:{sync:!0}},{multi:!0})}}),e()})})}}]),e}();module.exports=a;
//# sourceMappingURL=../sourcemap/Database.js